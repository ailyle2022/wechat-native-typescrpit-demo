{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", {value: true});\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, {get: all[name], enumerable: true});\n};\nvar __exportStar = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && key !== \"default\")\n        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});\n  }\n  return target;\n};\nvar __toModule = (module2) => {\n  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);\n};\n\n// src/index.ts\n__markAsModule(exports);\n__export(exports, {\n  ApolloClients: () => ApolloClients,\n  DefaultApolloClient: () => DefaultApolloClient,\n  provideApolloClient: () => provideApolloClient,\n  provideApolloClients: () => provideApolloClients,\n  useApolloClient: () => useApolloClient,\n  useGlobalMutationLoading: () => useGlobalMutationLoading,\n  useGlobalQueryLoading: () => useGlobalQueryLoading,\n  useGlobalSubscriptionLoading: () => useGlobalSubscriptionLoading,\n  useLazyQuery: () => useLazyQuery,\n  useMutation: () => useMutation,\n  useMutationLoading: () => useMutationLoading,\n  useQuery: () => useQuery,\n  useQueryLoading: () => useQueryLoading,\n  useResult: () => useResult,\n  useSubscription: () => useSubscription,\n  useSubscriptionLoading: () => useSubscriptionLoading\n});\n\n// src/useQuery.ts\nvar import_vue_demi5 = __toModule(require(\"vue-demi\"));\nvar import_throttle_debounce = __toModule(require(\"throttle-debounce\"));\n\n// src/useApolloClient.ts\nvar import_vue_demi = __toModule(require(\"vue-demi\"));\nvar DefaultApolloClient = Symbol(\"default-apollo-client\");\nvar ApolloClients = Symbol(\"apollo-clients\");\nfunction resolveDefaultClient(providedApolloClients, providedApolloClient) {\n  const resolvedClient = providedApolloClients ? providedApolloClients.default : providedApolloClient != null ? providedApolloClient : void 0;\n  return resolvedClient;\n}\nfunction resolveClientWithId(providedApolloClients, clientId) {\n  if (!providedApolloClients) {\n    throw new Error(`No apolloClients injection found, tried to resolve '${clientId}' clientId`);\n  }\n  return providedApolloClients[clientId];\n}\nfunction useApolloClient(clientId) {\n  let resolveImpl;\n  const savedCurrentClients = currentApolloClients;\n  if (!(0, import_vue_demi.getCurrentInstance)() && !(0, import_vue_demi.getCurrentScope)()) {\n    resolveImpl = (id) => {\n      if (id) {\n        return resolveClientWithId(savedCurrentClients, id);\n      }\n      return resolveDefaultClient(savedCurrentClients, savedCurrentClients.default);\n    };\n  } else {\n    const providedApolloClients = (0, import_vue_demi.inject)(ApolloClients, null);\n    const providedApolloClient = (0, import_vue_demi.inject)(DefaultApolloClient, null);\n    resolveImpl = (id) => {\n      if (id) {\n        const client2 = resolveClientWithId(providedApolloClients, id);\n        if (client2) {\n          return client2;\n        }\n        return resolveClientWithId(savedCurrentClients, id);\n      }\n      const client = resolveDefaultClient(providedApolloClients, providedApolloClient);\n      if (client) {\n        return client;\n      }\n      return resolveDefaultClient(savedCurrentClients, savedCurrentClients.default);\n    };\n  }\n  function resolveClient(id = clientId) {\n    const client = resolveImpl(id);\n    if (!client) {\n      throw new Error(`Apollo client with id ${id != null ? id : \"default\"} not found. Use an app.runWithContext() or provideApolloClient() if you are outside of a component setup.`);\n    }\n    return client;\n  }\n  return {\n    resolveClient,\n    get client() {\n      return resolveClient();\n    }\n  };\n}\nvar currentApolloClients = {};\nfunction provideApolloClient(client) {\n  currentApolloClients = {\n    default: client\n  };\n  return function(fn) {\n    const result = fn();\n    currentApolloClients = {};\n    return result;\n  };\n}\nfunction provideApolloClients(clients) {\n  currentApolloClients = clients;\n  return function(fn) {\n    const result = fn();\n    currentApolloClients = {};\n    return result;\n  };\n}\n\n// src/util/paramToRef.ts\nvar import_vue_demi2 = __toModule(require(\"vue-demi\"));\nfunction paramToRef(param) {\n  if ((0, import_vue_demi2.isRef)(param)) {\n    return param;\n  } else if (typeof param === \"function\") {\n    return (0, import_vue_demi2.computed)(param);\n  } else {\n    return (0, import_vue_demi2.ref)(param);\n  }\n}\n\n// src/util/paramToReactive.ts\nvar import_vue_demi3 = __toModule(require(\"vue-demi\"));\nfunction paramToReactive(param) {\n  if ((0, import_vue_demi3.isRef)(param)) {\n    return param;\n  } else if (typeof param === \"function\") {\n    return (0, import_vue_demi3.computed)(param);\n  } else if (param) {\n    return (0, import_vue_demi3.reactive)(param);\n  } else {\n    return param;\n  }\n}\n\n// src/util/useEventHook.ts\nfunction useEventHook() {\n  const fns = [];\n  function on(fn) {\n    fns.push(fn);\n    return {\n      off: () => off(fn)\n    };\n  }\n  function off(fn) {\n    const index = fns.indexOf(fn);\n    if (index !== -1) {\n      fns.splice(index, 1);\n    }\n  }\n  function trigger(...params) {\n    for (const fn of fns) {\n      fn(...params);\n    }\n  }\n  function getCount() {\n    return fns.length;\n  }\n  return {\n    on,\n    off,\n    trigger,\n    getCount\n  };\n}\n\n// src/util/loadingTracking.ts\nvar import_vue_demi4 = __toModule(require(\"vue-demi\"));\n\n// src/util/env.ts\nvar isServer = typeof window === \"undefined\";\n\n// src/util/loadingTracking.ts\nvar globalTracking = {\n  queries: (0, import_vue_demi4.ref)(0),\n  mutations: (0, import_vue_demi4.ref)(0),\n  subscriptions: (0, import_vue_demi4.ref)(0),\n  components: new Map()\n};\nfunction getCurrentTracking() {\n  const vm = (0, import_vue_demi4.getCurrentInstance)();\n  if (!vm) {\n    return {};\n  }\n  let tracking;\n  if (!globalTracking.components.has(vm)) {\n    globalTracking.components.set(vm, tracking = {\n      queries: (0, import_vue_demi4.ref)(0),\n      mutations: (0, import_vue_demi4.ref)(0),\n      subscriptions: (0, import_vue_demi4.ref)(0)\n    });\n    (0, import_vue_demi4.onUnmounted)(() => {\n      globalTracking.components.delete(vm);\n    });\n  } else {\n    tracking = globalTracking.components.get(vm);\n  }\n  return {\n    tracking\n  };\n}\nfunction track(loading, type) {\n  if (isServer)\n    return;\n  const {tracking} = getCurrentTracking();\n  (0, import_vue_demi4.watch)(loading, (value, oldValue) => {\n    if (oldValue != null && value !== oldValue) {\n      const mod = value ? 1 : -1;\n      if (tracking)\n        tracking[type].value += mod;\n      globalTracking[type].value += mod;\n    }\n  }, {\n    immediate: true\n  });\n  (0, import_vue_demi4.onBeforeUnmount)(() => {\n    if (loading.value) {\n      if (tracking)\n        tracking[type].value--;\n      globalTracking[type].value--;\n    }\n  });\n}\nfunction trackQuery(loading) {\n  track(loading, \"queries\");\n}\nfunction trackMutation(loading) {\n  track(loading, \"mutations\");\n}\nfunction trackSubscription(loading) {\n  track(loading, \"subscriptions\");\n}\n\n// src/util/toApolloError.ts\nvar import_core = __toModule(require(\"@apollo/client/core/index.js\"));\nfunction toApolloError(error) {\n  if (!(error instanceof Error)) {\n    return new import_core.ApolloError({\n      networkError: Object.assign(new Error(), {originalError: error}),\n      errorMessage: String(error)\n    });\n  }\n  if ((0, import_core.isApolloError)(error)) {\n    return error;\n  }\n  return new import_core.ApolloError({networkError: error, errorMessage: error.message});\n}\nfunction resultErrorsToApolloError(errors) {\n  return new import_core.ApolloError({\n    graphQLErrors: errors,\n    errorMessage: `GraphQL response contains errors: ${errors.map((e) => e.message).join(\" | \")}`\n  });\n}\n\n// src/useQuery.ts\nfunction useQuery(document, variables, options) {\n  return useQueryImpl(document, variables, options);\n}\nfunction useQueryImpl(document, variables, options = {}, lazy = false) {\n  var _a;\n  const vm = (0, import_vue_demi5.getCurrentInstance)();\n  const currentOptions = (0, import_vue_demi5.ref)();\n  const documentRef = paramToRef(document);\n  const variablesRef = paramToRef(variables);\n  const optionsRef = paramToReactive(options);\n  const result = (0, import_vue_demi5.ref)();\n  const resultEvent = useEventHook();\n  const error = (0, import_vue_demi5.ref)(null);\n  const errorEvent = useEventHook();\n  const loading = (0, import_vue_demi5.ref)(false);\n  vm && trackQuery(loading);\n  const networkStatus = (0, import_vue_demi5.ref)();\n  let firstResolve;\n  let firstResolveTriggered = false;\n  let firstReject;\n  let firstRejectError;\n  const tryFirstResolve = () => {\n    firstResolveTriggered = true;\n    if (firstResolve)\n      firstResolve();\n  };\n  const tryFirstReject = (apolloError) => {\n    firstRejectError = apolloError;\n    if (firstReject)\n      firstReject(apolloError);\n  };\n  const resetFirstResolveReject = () => {\n    firstResolve = void 0;\n    firstReject = void 0;\n    firstResolveTriggered = false;\n    firstRejectError = void 0;\n  };\n  vm && ((_a = import_vue_demi5.onServerPrefetch) == null ? void 0 : _a(() => {\n    var _a2;\n    if (!isEnabled.value || isServer && ((_a2 = currentOptions.value) == null ? void 0 : _a2.prefetch) === false)\n      return;\n    return new Promise((resolve, reject) => {\n      firstResolve = () => {\n        resetFirstResolveReject();\n        resolve();\n      };\n      firstReject = (apolloError) => {\n        resetFirstResolveReject();\n        reject(apolloError);\n      };\n      if (firstResolveTriggered) {\n        firstResolve();\n      } else if (firstRejectError) {\n        firstReject(firstRejectError);\n      }\n    }).finally(stop);\n  }));\n  const {resolveClient} = useApolloClient();\n  function getClient() {\n    var _a2;\n    return resolveClient((_a2 = currentOptions.value) == null ? void 0 : _a2.clientId);\n  }\n  const query = (0, import_vue_demi5.shallowRef)();\n  let observer;\n  let started = false;\n  let ignoreNextResult = false;\n  let firstStart = true;\n  function start() {\n    var _a2, _b, _c, _d, _e;\n    if (started || !isEnabled.value || isServer && ((_a2 = currentOptions.value) == null ? void 0 : _a2.prefetch) === false || !currentDocument) {\n      tryFirstResolve();\n      return;\n    }\n    started = true;\n    error.value = null;\n    loading.value = true;\n    const client = getClient();\n    query.value = client.watchQuery({\n      query: currentDocument,\n      variables: currentVariables != null ? currentVariables : {},\n      ...currentOptions.value,\n      ...isServer && ((_b = currentOptions.value) == null ? void 0 : _b.fetchPolicy) !== \"no-cache\" ? {\n        fetchPolicy: \"network-only\"\n      } : {}\n    });\n    startQuerySubscription();\n    if (!isServer && (firstStart || !((_c = currentOptions.value) == null ? void 0 : _c.keepPreviousResult)) && (((_d = currentOptions.value) == null ? void 0 : _d.fetchPolicy) !== \"no-cache\" || currentOptions.value.notifyOnNetworkStatusChange)) {\n      const currentResult = query.value.getCurrentResult(false);\n      if (!currentResult.loading || currentResult.partial || ((_e = currentOptions.value) == null ? void 0 : _e.notifyOnNetworkStatusChange)) {\n        onNextResult(currentResult);\n        ignoreNextResult = !currentResult.loading;\n      } else if (currentResult.error) {\n        onError(currentResult.error);\n        ignoreNextResult = true;\n      }\n    }\n    if (!isServer) {\n      for (const item of subscribeToMoreItems) {\n        addSubscribeToMore(item);\n      }\n    }\n    firstStart = false;\n  }\n  function startQuerySubscription() {\n    if (observer && !observer.closed)\n      return;\n    if (!query.value)\n      return;\n    ignoreNextResult = false;\n    observer = query.value.subscribe({\n      next: onNextResult,\n      error: onError\n    });\n  }\n  function getErrorPolicy() {\n    var _a2, _b, _c, _d;\n    const client = resolveClient((_a2 = currentOptions.value) == null ? void 0 : _a2.clientId);\n    return ((_b = currentOptions.value) == null ? void 0 : _b.errorPolicy) || ((_d = (_c = client.defaultOptions) == null ? void 0 : _c.watchQuery) == null ? void 0 : _d.errorPolicy);\n  }\n  function onNextResult(queryResult) {\n    var _a2;\n    if (ignoreNextResult) {\n      ignoreNextResult = false;\n      return;\n    }\n    error.value = null;\n    processNextResult(queryResult);\n    const errorPolicy = getErrorPolicy();\n    if (errorPolicy && errorPolicy === \"all\" && !queryResult.error && ((_a2 = queryResult.errors) == null ? void 0 : _a2.length)) {\n      processError(resultErrorsToApolloError(queryResult.errors));\n    }\n    tryFirstResolve();\n  }\n  function processNextResult(queryResult) {\n    result.value = queryResult.data && Object.keys(queryResult.data).length === 0 ? void 0 : queryResult.data;\n    loading.value = queryResult.loading;\n    networkStatus.value = queryResult.networkStatus;\n    (0, import_vue_demi5.nextTick)(() => {\n      resultEvent.trigger(queryResult, {\n        client: getClient()\n      });\n    });\n  }\n  function onError(queryError) {\n    if (ignoreNextResult) {\n      ignoreNextResult = false;\n      return;\n    }\n    const apolloError = toApolloError(queryError);\n    const errorPolicy = getErrorPolicy();\n    if (errorPolicy && errorPolicy !== \"none\") {\n      processNextResult(query.value.getCurrentResult());\n    }\n    processError(apolloError);\n    tryFirstReject(apolloError);\n    resubscribeToQuery();\n  }\n  function processError(apolloError) {\n    error.value = apolloError;\n    loading.value = false;\n    networkStatus.value = 8;\n    (0, import_vue_demi5.nextTick)(() => {\n      errorEvent.trigger(apolloError, {\n        client: getClient()\n      });\n    });\n  }\n  function resubscribeToQuery() {\n    if (!query.value)\n      return;\n    const lastError = query.value.getLastError();\n    const lastResult = query.value.getLastResult();\n    query.value.resetLastResults();\n    startQuerySubscription();\n    Object.assign(query.value, {lastError, lastResult});\n  }\n  let onStopHandlers = [];\n  function stop() {\n    tryFirstResolve();\n    if (!started)\n      return;\n    started = false;\n    loading.value = false;\n    onStopHandlers.forEach((handler) => handler());\n    onStopHandlers = [];\n    if (query.value) {\n      query.value.stopPolling();\n      query.value = null;\n    }\n    if (observer) {\n      observer.unsubscribe();\n      observer = void 0;\n    }\n  }\n  let restarting = false;\n  function baseRestart() {\n    if (!started || restarting)\n      return;\n    restarting = true;\n    (0, import_vue_demi5.nextTick)(() => {\n      if (started) {\n        stop();\n        start();\n      }\n      restarting = false;\n    });\n  }\n  let debouncedRestart;\n  let isRestartDebounceSetup = false;\n  function updateRestartFn() {\n    var _a2, _b;\n    if (!currentOptions.value) {\n      debouncedRestart = baseRestart;\n    } else {\n      if ((_a2 = currentOptions.value) == null ? void 0 : _a2.throttle) {\n        debouncedRestart = (0, import_throttle_debounce.throttle)(currentOptions.value.throttle, baseRestart);\n      } else if ((_b = currentOptions.value) == null ? void 0 : _b.debounce) {\n        debouncedRestart = (0, import_throttle_debounce.debounce)(currentOptions.value.debounce, baseRestart);\n      } else {\n        debouncedRestart = baseRestart;\n      }\n      isRestartDebounceSetup = true;\n    }\n  }\n  function restart() {\n    if (!started || restarting)\n      return;\n    if (!isRestartDebounceSetup)\n      updateRestartFn();\n    debouncedRestart();\n  }\n  let currentDocument = documentRef.value;\n  const forceDisabled = (0, import_vue_demi5.ref)(lazy);\n  const enabledOption = (0, import_vue_demi5.computed)(() => !currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled);\n  const isEnabled = (0, import_vue_demi5.computed)(() => enabledOption.value && !forceDisabled.value && !!documentRef.value);\n  (0, import_vue_demi5.watch)(() => (0, import_vue_demi5.unref)(optionsRef), (value) => {\n    if (currentOptions.value && (currentOptions.value.throttle !== value.throttle || currentOptions.value.debounce !== value.debounce)) {\n      updateRestartFn();\n    }\n    currentOptions.value = value;\n    restart();\n  }, {\n    deep: true,\n    immediate: true\n  });\n  (0, import_vue_demi5.watch)(documentRef, (value) => {\n    currentDocument = value;\n    restart();\n  });\n  let currentVariables;\n  let currentVariablesSerialized;\n  (0, import_vue_demi5.watch)(() => {\n    if (isEnabled.value) {\n      return variablesRef.value;\n    } else {\n      return void 0;\n    }\n  }, (value) => {\n    const serialized = JSON.stringify([value, isEnabled.value]);\n    if (serialized !== currentVariablesSerialized) {\n      currentVariables = value;\n      restart();\n    }\n    currentVariablesSerialized = serialized;\n  }, {\n    deep: true,\n    immediate: true\n  });\n  function refetch(variables2 = void 0) {\n    if (query.value) {\n      if (variables2) {\n        currentVariables = variables2;\n      }\n      error.value = null;\n      loading.value = true;\n      return query.value.refetch(variables2).then((refetchResult) => {\n        var _a2;\n        const currentResult = (_a2 = query.value) == null ? void 0 : _a2.getCurrentResult();\n        currentResult && processNextResult(currentResult);\n        return refetchResult;\n      });\n    }\n  }\n  function fetchMore(options2) {\n    if (query.value) {\n      error.value = null;\n      loading.value = true;\n      return query.value.fetchMore(options2).then((fetchMoreResult) => {\n        var _a2;\n        const currentResult = (_a2 = query.value) == null ? void 0 : _a2.getCurrentResult();\n        currentResult && processNextResult(currentResult);\n        return fetchMoreResult;\n      });\n    }\n  }\n  const subscribeToMoreItems = [];\n  function subscribeToMore(options2) {\n    if (isServer)\n      return;\n    const optionsRef2 = paramToRef(options2);\n    (0, import_vue_demi5.watch)(optionsRef2, (value, oldValue, onCleanup) => {\n      const index = subscribeToMoreItems.findIndex((item2) => item2.options === oldValue);\n      if (index !== -1) {\n        subscribeToMoreItems.splice(index, 1);\n      }\n      const item = {\n        options: value,\n        unsubscribeFns: []\n      };\n      subscribeToMoreItems.push(item);\n      addSubscribeToMore(item);\n      onCleanup(() => {\n        item.unsubscribeFns.forEach((fn) => fn());\n        item.unsubscribeFns = [];\n      });\n    }, {\n      immediate: true\n    });\n  }\n  function addSubscribeToMore(item) {\n    if (!started)\n      return;\n    if (!query.value) {\n      throw new Error(\"Query is not defined\");\n    }\n    const unsubscribe = query.value.subscribeToMore(item.options);\n    onStopHandlers.push(unsubscribe);\n    item.unsubscribeFns.push(unsubscribe);\n  }\n  (0, import_vue_demi5.watch)(isEnabled, (value) => {\n    if (value) {\n      (0, import_vue_demi5.nextTick)(() => {\n        start();\n      });\n    } else {\n      stop();\n    }\n  });\n  if (isEnabled.value) {\n    start();\n  }\n  vm && (0, import_vue_demi5.onBeforeUnmount)(() => {\n    stop();\n    subscribeToMoreItems.length = 0;\n  });\n  return {\n    result,\n    loading,\n    networkStatus,\n    error,\n    start,\n    stop,\n    restart,\n    forceDisabled,\n    document: documentRef,\n    variables: variablesRef,\n    options: optionsRef,\n    query,\n    refetch,\n    fetchMore,\n    subscribeToMore,\n    onResult: resultEvent.on,\n    onError: errorEvent.on\n  };\n}\n\n// src/useLazyQuery.ts\nvar import_vue_demi6 = __toModule(require(\"vue-demi\"));\nfunction useLazyQuery(document, variables, options) {\n  const query = useQueryImpl(document, variables, options, true);\n  function load(document2, variables2, options2) {\n    if (document2) {\n      query.document.value = document2;\n    }\n    if (variables2) {\n      query.variables.value = variables2;\n    }\n    if (options2) {\n      Object.assign((0, import_vue_demi6.isRef)(query.options) ? query.options.value : query.options, options2);\n    }\n    const isFirstRun = query.forceDisabled.value;\n    if (isFirstRun) {\n      query.forceDisabled.value = false;\n      return new Promise((resolve, reject) => {\n        const {off: offResult} = query.onResult((result) => {\n          if (!result.loading) {\n            resolve(result.data);\n            offResult();\n            offError();\n          }\n        });\n        const {off: offError} = query.onError((error) => {\n          reject(error);\n          offResult();\n          offError();\n        });\n      });\n    } else {\n      return false;\n    }\n  }\n  return {\n    ...query,\n    load\n  };\n}\n\n// src/useMutation.ts\nvar import_vue_demi7 = __toModule(require(\"vue-demi\"));\nfunction useMutation(document, options = {}) {\n  const vm = (0, import_vue_demi7.getCurrentInstance)();\n  const loading = (0, import_vue_demi7.ref)(false);\n  vm && trackMutation(loading);\n  const error = (0, import_vue_demi7.ref)(null);\n  const called = (0, import_vue_demi7.ref)(false);\n  const doneEvent = useEventHook();\n  const errorEvent = useEventHook();\n  const {resolveClient} = useApolloClient();\n  async function mutate(variables, overrideOptions = {}) {\n    let currentDocument;\n    if (typeof document === \"function\") {\n      currentDocument = document();\n    } else if ((0, import_vue_demi7.isRef)(document)) {\n      currentDocument = document.value;\n    } else {\n      currentDocument = document;\n    }\n    let currentOptions;\n    if (typeof options === \"function\") {\n      currentOptions = options();\n    } else if ((0, import_vue_demi7.isRef)(options)) {\n      currentOptions = options.value;\n    } else {\n      currentOptions = options;\n    }\n    const client = resolveClient(currentOptions.clientId);\n    error.value = null;\n    loading.value = true;\n    called.value = true;\n    try {\n      const result = await client.mutate({\n        mutation: currentDocument,\n        ...currentOptions,\n        ...overrideOptions,\n        variables: (variables != null ? variables : currentOptions.variables) ? {\n          ...currentOptions.variables,\n          ...variables\n        } : void 0\n      });\n      loading.value = false;\n      doneEvent.trigger(result, {\n        client\n      });\n      return result;\n    } catch (e) {\n      const apolloError = toApolloError(e);\n      error.value = apolloError;\n      loading.value = false;\n      errorEvent.trigger(apolloError, {\n        client\n      });\n      if (currentOptions.throws === \"always\" || currentOptions.throws !== \"never\" && !errorEvent.getCount()) {\n        throw apolloError;\n      }\n    }\n    return null;\n  }\n  vm && (0, import_vue_demi7.onBeforeUnmount)(() => {\n    loading.value = false;\n  });\n  return {\n    mutate,\n    loading,\n    error,\n    called,\n    onDone: doneEvent.on,\n    onError: errorEvent.on\n  };\n}\n\n// src/useSubscription.ts\nvar import_vue_demi8 = __toModule(require(\"vue-demi\"));\nvar import_throttle_debounce2 = __toModule(require(\"throttle-debounce\"));\nfunction useSubscription(document, variables = void 0, options = {}) {\n  const vm = (0, import_vue_demi8.getCurrentInstance)();\n  const documentRef = paramToRef(document);\n  const variablesRef = paramToRef(variables);\n  const optionsRef = paramToReactive(options);\n  const result = (0, import_vue_demi8.ref)();\n  const resultEvent = useEventHook();\n  const error = (0, import_vue_demi8.ref)(null);\n  const errorEvent = useEventHook();\n  const loading = (0, import_vue_demi8.ref)(false);\n  vm && trackSubscription(loading);\n  const {resolveClient} = useApolloClient();\n  const subscription = (0, import_vue_demi8.ref)(null);\n  let observer = null;\n  let started = false;\n  function getClient() {\n    var _a;\n    return resolveClient((_a = currentOptions.value) == null ? void 0 : _a.clientId);\n  }\n  function start() {\n    if (started || !isEnabled.value || isServer)\n      return;\n    started = true;\n    loading.value = true;\n    const client = getClient();\n    subscription.value = client.subscribe({\n      query: currentDocument,\n      variables: currentVariables,\n      ...currentOptions.value\n    });\n    observer = subscription.value.subscribe({\n      next: onNextResult,\n      error: onError\n    });\n  }\n  function onNextResult(fetchResult) {\n    result.value = fetchResult.data;\n    loading.value = false;\n    resultEvent.trigger(fetchResult, {\n      client: getClient()\n    });\n  }\n  function onError(fetchError) {\n    const apolloError = toApolloError(fetchError);\n    error.value = apolloError;\n    loading.value = false;\n    errorEvent.trigger(apolloError, {\n      client: getClient()\n    });\n  }\n  function stop() {\n    if (!started)\n      return;\n    started = false;\n    loading.value = false;\n    if (subscription.value) {\n      subscription.value = null;\n    }\n    if (observer) {\n      observer.unsubscribe();\n      observer = null;\n    }\n  }\n  let restarting = false;\n  function baseRestart() {\n    if (!started || restarting)\n      return;\n    restarting = true;\n    (0, import_vue_demi8.nextTick)(() => {\n      if (started) {\n        stop();\n        start();\n      }\n      restarting = false;\n    });\n  }\n  let debouncedRestart;\n  function updateRestartFn() {\n    var _a, _b;\n    if ((_a = currentOptions.value) == null ? void 0 : _a.throttle) {\n      debouncedRestart = (0, import_throttle_debounce2.throttle)(currentOptions.value.throttle, baseRestart);\n    } else if ((_b = currentOptions.value) == null ? void 0 : _b.debounce) {\n      debouncedRestart = (0, import_throttle_debounce2.debounce)(currentOptions.value.debounce, baseRestart);\n    } else {\n      debouncedRestart = baseRestart;\n    }\n  }\n  function restart() {\n    if (!debouncedRestart)\n      updateRestartFn();\n    debouncedRestart();\n  }\n  const currentOptions = (0, import_vue_demi8.ref)();\n  (0, import_vue_demi8.watch)(() => (0, import_vue_demi8.isRef)(optionsRef) ? optionsRef.value : optionsRef, (value) => {\n    if (currentOptions.value && (currentOptions.value.throttle !== value.throttle || currentOptions.value.debounce !== value.debounce)) {\n      updateRestartFn();\n    }\n    currentOptions.value = value;\n    restart();\n  }, {\n    deep: true,\n    immediate: true\n  });\n  let currentDocument;\n  (0, import_vue_demi8.watch)(documentRef, (value) => {\n    currentDocument = value;\n    restart();\n  }, {\n    immediate: true\n  });\n  let currentVariables;\n  let currentVariablesSerialized;\n  (0, import_vue_demi8.watch)(variablesRef, (value, oldValue) => {\n    const serialized = JSON.stringify(value);\n    if (serialized !== currentVariablesSerialized) {\n      currentVariables = value;\n      restart();\n    }\n    currentVariablesSerialized = serialized;\n  }, {\n    deep: true,\n    immediate: true\n  });\n  const enabledOption = (0, import_vue_demi8.computed)(() => !currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled);\n  const isEnabled = enabledOption;\n  (0, import_vue_demi8.watch)(isEnabled, (value) => {\n    if (value) {\n      start();\n    } else {\n      stop();\n    }\n  }, {\n    immediate: true\n  });\n  vm && (0, import_vue_demi8.onBeforeUnmount)(stop);\n  return {\n    result,\n    loading,\n    error,\n    start,\n    stop,\n    restart,\n    document: documentRef,\n    variables: variablesRef,\n    options: optionsRef,\n    subscription,\n    onResult: resultEvent.on,\n    onError: errorEvent.on\n  };\n}\n\n// src/useResult.ts\nvar import_vue_demi9 = __toModule(require(\"vue-demi\"));\nfunction useResult(result, defaultValue, pick) {\n  console.warn(`'useResult' is deprecated and will be removed soon. Please use 'computed' instead.\nBefore:\nconst items = useResult(result, [], data => data.someField.myItems)\nAfter:\nconst items = computed(() => result.value?.someField.myItems ?? [])`);\n  return (0, import_vue_demi9.computed)(() => {\n    const value = result.value;\n    if (value) {\n      if (pick) {\n        try {\n          return pick(value);\n        } catch (e) {\n        }\n      } else {\n        const keys = Object.keys(value);\n        if (keys.length === 1) {\n          return value[keys[0]];\n        } else {\n          return value;\n        }\n      }\n    }\n    return defaultValue;\n  });\n}\n\n// src/useLoading.ts\nvar import_vue_demi10 = __toModule(require(\"vue-demi\"));\nfunction useQueryLoading() {\n  const {tracking} = getCurrentTracking();\n  if (!tracking)\n    throw new Error(\"useQueryLoading must be called inside a setup function.\");\n  return (0, import_vue_demi10.computed)(() => tracking.queries.value > 0);\n}\nfunction useMutationLoading() {\n  const {tracking} = getCurrentTracking();\n  if (!tracking)\n    throw new Error(\"useMutationLoading must be called inside a setup function.\");\n  return (0, import_vue_demi10.computed)(() => tracking.mutations.value > 0);\n}\nfunction useSubscriptionLoading() {\n  const {tracking} = getCurrentTracking();\n  if (!tracking)\n    throw new Error(\"useSubscriptionLoading must be called inside a setup function.\");\n  return (0, import_vue_demi10.computed)(() => tracking.subscriptions.value > 0);\n}\nfunction useGlobalQueryLoading() {\n  return (0, import_vue_demi10.computed)(() => globalTracking.queries.value > 0);\n}\nfunction useGlobalMutationLoading() {\n  return (0, import_vue_demi10.computed)(() => globalTracking.mutations.value > 0);\n}\nfunction useGlobalSubscriptionLoading() {\n  return (0, import_vue_demi10.computed)(() => globalTracking.subscriptions.value > 0);\n}\n//# sourceMappingURL=index.js.map\n"]}